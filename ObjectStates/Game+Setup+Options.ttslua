-- @author Darrell for UI generation scripting
-- @author Milty for game setup

local _config = false
local DEFAULT_CONFIG = {
    playerCount = 6,
    extraRings = 0,
    useCodexACs = false,
    is14ptGame = false,
}

local CODEX_AC_LIST = {'Hack Election', 'Harness Energy', 'Blitz', 'Fighter Conscription', 'Forward Supply Base', 'Rally', 'War Machine (1)', 'War Machine (2)', 'War Machine (3)', 'War Machine (4)', 'Master Plan', 'Insider Information', 'Plagiarize', 'Scramble Frequency', 'Solar Flare', 'Reflective Shielding', 'Impersonation', 'Sanction', 'Counterstroke', 'Ghost Squad',}

local CONTRIBUTORS = {
    '3tamatulg',
    'Alister',
    'Billy',
    'Blarknob',
    'Brandondash',
    'Cruix',
    'Cyrusa',
    'Darrell',
    'Darth Batman',
    'Doot',
    'Garnet Bear',
    'Goatboy',  -- TI4 model for rotating space dock
    'Hooliganj',
    'Jatta Pake',
    'Jefferson',
    'Lily',
    'Loving Teammate',
    'Mage',
    'Mantis',
    'Max Philippa',
    'Milty',
    'Nicest_guy_22',
    'Plat251',  -- crisper fonts on multiRoller
    'Positive',
    'Psicoma',
    'Raptor1210',
    'Rodney',
    'Saunick',  -- TI4 ship models on thingiverse
    'SCPT Hunter',
    'SCPT Matt',
    'Snorecerer',
    'Tactic Blue',
    'ThatRobHuman',
    'Toppopia',
    'Volverbot',  -- Numpad hot keys
    'Wekker',
    'West',  -- updated extra strat cards
    'x3n d0g',
}

local BACK_MESSAGE = [[
This mod is made of contributions from many people.
-
Thanks to $CONTRIBUTORS, and the entire TI4 community for their contributions.
-
A massive shout out to Fantasy Flight Games for creating an awesome game. If you have the opportunity please support them. The board game industry wouldn't be the same without them and if you enjoy their work please, please support them and your local game stores.
]]

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local _setupHelper = getHelperClient('TI4_SETUP_HELPER')
local _deckHelper = getHelperClient('TI4_DECK_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

-------------------------------------------------------------------------------
function onLoad()
    _config = DEFAULT_CONFIG
    Wait.frames(_createUI, 2)
    Wait.frames(updateUiFromConfig, 4)
end

function onPlayerConnect(playerId)
    -- UI does not seem to appear for new players, recreating it fixes.
    Wait.frames(_createUI, 2)
    Wait.frames(updateUiFromConfig, 4)
end

function _createUI()
    local scale = self.getScale()
    local uiScale = (4 / scale.x) .. ' ' .. (4 / scale.z) .. ' ' .. (1 / scale.y)

    local function text(class, text)
        return {
            tag = 'Text',
            attributes = {
                class = class
            },
            value = text
        }
    end

    local function toggle(id, text, isOn)
        return {
            tag = 'Toggle',
            attributes = {
                id = id,
                isOn = isOn or nil
            },
            value = text
        }
    end

    local function toggleGroup(idPrefix, values)
        local height = math.ceil(#values / 3) * 50
        local toggles = {}
        for _, value in ipairs(values) do
            table.insert(toggles, {
                tag = 'ToggleButton',
                attributes = {
                    id = idPrefix .. string.gsub(tostring(value), ' ', '_'),
                },
                value = value
            })
        end
        return {
            tag = 'ToggleGroup',
            attributes = {
                preferredHeight = height,
            },
            children = {
                {
                    tag = 'GridLayout',
                    children = toggles
                }
            }
        }
    end

    local defaultColorBlock = '#FFFFFF|#1F45FC|#38ACEC|rgba(0.78,0.78,0.78,0.5)'
    local defaults = {
        tag = 'Defaults',
        children = {
            {
                tag = 'VerticalLayout',
                attributes = {
                    spacing = 10,
                    childForceExpandHeight = false,
                }
            },
            {
                tag = 'HorizontalLayout',
                attributes = {
                    spacing = 10,
                }
            },
            {
                tag = 'GridLayout',
                attributes = {
                    spacing = '10 10',
                    cellSize = '62 40' -- 86 40 for three columns
                },
            },
            {
                tag = 'ToggleGroup',
                attributes = {
                    toggleBackgroundColor = '#FF0000',
                    toggleSelectedColor = '#38ACEC',
                }
            },
            {
                tag = 'Toggle',
                attributes = {
                    fontSize = 16,
                    textColor = 'White',
                    onValueChanged = 'onToggleValueChanged',
                }
            },
            {
                tag = 'ToggleButton',
                attributes = {
                    fontSize = 16,
                    onValueChanged = 'onToggleValueChanged',
                    colors = defaultColorBlock
                }
                -- ToggleGroup.toggleSelectedColor does not seem to apply to ToggleButton?
            },
            {
                tag = 'Button',
                attributes = {
                    onClick = 'onButtonClick'
                }
            },
            {
                tag = 'Text',
                attributes = {
                    class = 'title',
                    fontSize = 24,
                    fontStyle = 'Bold',
                    color = 'White',
                    alignment = 'MiddleCenter',
                }
            },
            {
                tag = 'Text',
                attributes = {
                    class = 'heading',
                    fontSize = 16,
                    color = 'White',
                    alignment = 'MiddleCenter'
                }
            },
        }
    }
    local top = {
        tag = 'Panel',
        attributes = {
            position = '0 0 2',
            rotation = '0 180 0',
            width = 300,
            height = 500,
            scale = uiScale,
        },
        children = {
            {
                tag = 'VerticalLayout',
                attributes = {
                    padding = '10 10 10 10',
                },
                children = {
                    text('title', 'TI4 Game Setup Options'),

                    text('heading', 'Player count'),
                    toggleGroup('playerCount', { 2, 3, 4, 5, 6, 7, 8 }),

                    text('heading', 'Extra map rings'),
                    toggleGroup('extraRings', { 0, 1, 2 }),

                    toggle('useCodexACs', 'Use Codex action cards'),
                    toggle('14ptGame', '14 point game'),
                }
            },
            {
                tag = 'Panel',
                attributes = {
                    height = 70,
                    padding = '10 10 10 10',
                    rectAlignment = 'LowerCenter',
                },
                children = {
                    {
                        tag = 'Button',
                        attributes = {
                            id = 'setup',
                            fontSize = 24,
                        },
                        value = 'Setup'
                    },
                }
            }
        }
    }
    local bottom = {
        tag = 'Panel',
        attributes = {
            position = '0 0 -22',
            rotation = '0 0 0',
            width = 300,
            height = 500,
            padding = '20 20 20 20',
            scale = uiScale,
            color = '#000000e0'
        },
        children = {
            {
                tag = 'Text',
                attributes = {
                    fontSize = 14,
                    color = 'White',
                    alignment = 'MiddleCenter',
                },
                value = BACK_MESSAGE:gsub('$CONTRIBUTORS', table.concat(CONTRIBUTORS, ', '))
            }
        }
    }

    self.UI.setXmlTable({ defaults, top, bottom })
end

function updateUiFromConfig()
    self.UI.setAttribute('useCodexACs', 'isOn', _config.useCodexACs)
    self.UI.setAttribute('14ptGame', 'isOn', _config.is14ptGame)
    for i = 3, 8 do
        self.UI.setAttribute('playerCount' .. i, 'isOn', _config.playerCount == i)
    end
    for i = 0, 2 do
        self.UI.setAttribute('extraRings' .. i, 'isOn', _config.extraRings == i)
    end
end

-------------------------------------------------------------------------------

local RIGHT_CLICK = '-2'

function onButtonClick(player, inputType, id)
    local isRightClick = inputType == RIGHT_CLICK and true or false
    if id == 'setup' then
        setupGame(isRightClick)
        if not isRightClick then
            packSelfIntoSetupBag()
        end
    else
        error(TAG .. ': unknown button "' .. id .. '"')
    end
end

function onToggleValueChanged(player, value, id)
    local valueAsBool = string.lower(value) == 'true' and true or false
    assert(type(valueAsBool) == 'boolean')

    local playerCount = string.match(id, '^playerCount(.*)$')
    local extraRings = string.match(id, '^extraRings(.*)$')

    if playerCount then
        if valueAsBool then
            _config.playerCount = tonumber(playerCount)
        end
    elseif extraRings then
        if valueAsBool then
            _config.extraRings = tonumber(extraRings)
        end
    elseif id == 'useCodexACs' then
        _config.useCodexACs = valueAsBool
    elseif id == '14ptGame' then
        _config.is14ptGame = valueAsBool
    else
        error(TAG .. ': unknown toggle "' .. id .. '"')
    end

    if _config.playerCount > 6 then
        _config.extraRings = math.max(_config.extraRings, 1)
    end
    Wait.frames(updateUiFromConfig, 2)
end

-------------------------------------------------------------------------------

function setupGame(isRightClick)
    local playerCount = _config.playerCount
    local extraRings = _config.extraRings
    print('Setting up for ' .. playerCount .. ' players with ' .. extraRings .. ' extra map rings')

    setupCodexACs(_config.useCodexACs)
    setup14ptGame(_config.is14ptGame)

    _setupHelper.setup({
        playerCount = playerCount,
        extraRings = extraRings,
        isRightClick = isRightClick
    })
end

function setupCodexACs(useCodexACs)
    local actionDeck = false
    local codexDeck = false
    local variantsBag = false
    for i, object in ipairs(getAllObjects()) do
        local name = object.getName()
        if object.tag == 'Deck' and name == 'Actions' then
            actionDeck = object
        elseif object.tag == 'Deck' and name == 'Codex Action Cards' then
            codexDeck = object
        elseif object.tag == 'Bag' and string.match(name, '^Variant Pieces') then
            variantsBag = object
        end
    end

    if not actionDeck then
        printToAll('Setup codex action cards: cannot find action deck, skipping this step.', 'Red')
        return
    end
    local actionDeckPos = actionDeck.getPosition()

    if useCodexACs then
        local aboveActionDeckPos = {
            x = actionDeckPos.x,
            y = actionDeckPos.y + 3,
            z = actionDeckPos.z
        }
        if codexDeck then
            local collide = false
            local fast = true
            codexDeck.setPositionSmooth(aboveActionDeckPos, collide, fast)
            codexDeck.setRotationSmooth(actionDeck.getRotation(), collide, fast)
        elseif variantsBag then
            for _, entry in ipairs(variantsBag.getObjects()) do
                if entry.name == 'Codex Action Cards' then
                    codexDeck = variantsBag.takeObject({
                        guid = entry.guid,
                        position = aboveActionDeckPos,
                        rotation = actionDeck.getRotation(),
                        smooth = true
                    })
                    break
                end
            end
        end

        if codexDeck then
            print('Setup codex action cards: adding to actions deck')
        else
            printToAll('Setup codex action cards: cannot find codex action deck, skipping this step.', 'Red')
            return
        end
        Wait.time(function() actionDeck.shuffle() end, 5)
    else
        -- Remove any Codex ACs in the actions deck.  The Codex ACs start in
        -- variants, so for this to happen they would have to have been added
        -- to the Actions deck somehow first.  Since this is rare do not worry
        -- too much about it, just pull out the cards and let the players take
        -- it from there.
        local codexACSet = {}
        for _, codexAC in ipairs(CODEX_AC_LIST) do
            codexACSet[codexAC] = true
        end
        for i, entry in ipairs(actionDeck.getObjects()) do
            if codexACSet[entry.name] then
                actionDeck.takeObject({
                    guid = entry.guid,
                    position = {
                        x = actionDeckPos.x,
                        y = actionDeckPos.y + 3 + (i / 5),
                        z = actionDeckPos.z + 5
                    }
                })
            end
        end
    end
end

function setup14ptGame(is14ptGame)
    local scoreboard = _getByName('Scoreboard')
    local expect = is14ptGame and true or false
    if scoreboard and scoreboard.is_face_down ~= expect then
        scoreboard.setLock(false)
        scoreboard.flip()
        Wait.time(function() scoreboard.setLock(true) end, 5)
    end
end

function packSelfIntoSetupBag()
    local setupBag = _getByName('Setup Bag')
    local tutorial = _getByName('TI4 TTS Tutorial Series')
    if tutorial then
        setupBag.putObject(tutorial)
    end
    setupBag.putObject(self)
end

function _getByName(name)
    for _, object in ipairs(getAllObjects()) do
        if object.getName() == name then
            return object
        end
    end
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)