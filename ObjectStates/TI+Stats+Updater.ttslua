--- Add various game stats to the "notes" panel.
-- @author Darrell, PhilRoi

local WINDOW_SIZE = {
    COLS = 40,
    ROWS = 25
}

local HEX_COLOR = {
    LABEL = 'cccc99',
    Red = 'cc0000',
    Green = '00cc00',
    Orange = 'ee5500',
    Pink = 'dd00dd',
    White = 'e0e0e0',
    Blue = '2255ee',
    Purple = '9b59b6',
    Yellow = 'dddd00',
    Brown = '703A16',
}

-- For the log chat pad left with spaces so things line up.  Using strlen
-- is okay, but can do better.  Just specify manually here.
local PREFIX = {
    LABEL = '            ',
    Red = '      ',
    Green = '  ',
    Orange = '',
    Pink = '    ',
    White = '  ',
    Blue = '    ',
    Purple = ' ',
    Yellow = ' ',
    Brown = '  ',
}

local PERIODIC_SECONDS = 5

local _waitId = false
local _logNext = false
local _periodicUpdates = false

-------------------------------------------------------------------------------

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _factionHelper = getHelperClient('TI4_FACTION_HELPER')
local _systemHelper = getHelperClient('TI4_SYSTEM_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

local _lowerNameToResourcesAndInfluence = false

--- Group objects by player zone they are in, if any.
-- @param objects : list of objects.
-- @return table : map from color to in-color-zone objects.
function groupByPlayerZone(objects)
    assert(type(objects) == 'table')

    local guidToPosition = {}
    for _, object in ipairs(objects) do
        guidToPosition[object.getGUID()] = object.getPosition()
    end
    local guidToZoneColor = _zoneHelper.zonesFromPositions(guidToPosition)

    local colorToObjects = {}
    for _, object in ipairs(objects) do
        local color = guidToZoneColor[object.getGUID()]
        if color then
            local entry = colorToObjects[color]
            if not entry then
                entry = {}
                colorToObjects[color] = entry
            end
            table.insert(entry, object)
        end
    end
    return colorToObjects
end

--- Split into face up / face down lists.
-- @param objects table : list of objects.
-- @return table, table : list of face up, list of face down.
function groupByFaceUpDown(objects)
    assert(type(objects) == 'table')

    local faceUp = {}
    local faceDown = {}
    for _, object in ipairs(objects) do
        if object.is_face_down then
            table.insert(faceDown, object)
        else
            table.insert(faceUp, object)
        end
    end
    return faceUp, faceDown
end

--- Get all tokens on the table.
-- @param tokenType string : either "Command" or "Owner".
-- @return table : list of command token objects.
function getTokens(tokenType)
    assert(type(tokenType) == 'string')

    local tokens = {}
    local tokenPattern = '^(.*) ' .. tokenType .. ' Token$'
    for _, object in ipairs(getAllObjects()) do
        if string.match(object.getName(), tokenPattern) then
            table.insert(tokens, object)
        end
    end
    return tokens
end

--- Restrict to tokens for the color's faction.
-- @param color string : color.
-- @param tokens table : list of token objects.
-- @return table : list of token objects belonging to color's faction.
function filterTokens(color, tokens)
    assert(type(color) == 'string' and type(tokens) == 'table')

    local filtered = {}
    local faction = color and _factionHelper.fromColor(color)
    if faction then
        local tokenPattern = '^' .. faction.tokenName:gsub('-', '%%-')
        for _, token in ipairs(tokens) do
            if string.match(token.getName(), tokenPattern) then
                table.insert(filtered, token)
            end
        end
    end
    return filtered
end

-------------------------------------------------------------------------------

--- Get tactic, fleet, and strategy token counts.
-- @param color string : color.
-- @param commandTokenPositions table : list of command token positions.
-- @return number, number, number: tactics, fleet, and strategy token allocations.
function countCommandTokens(color, commandTokenPositions)
    assert(type(color) == 'string' and type(commandTokenPositions) == 'table')

    local numTactics = 0
    local numFleet = 0
    local numStrategy = 0

    local faction = color and _factionHelper.fromColor(color)
    local commandSheet = faction and getObjectFromGUID(faction.commandSheetGuid)
    if commandSheet then
        for _, commandTokenPosition in ipairs(commandTokenPositions) do
            local p = commandSheet.positionToLocal(commandTokenPosition)
            local dSq = p.x * p.x + p.z * p.z
            local degrees = (math.deg(math.atan2(p.z, p.x)) + 360) % 360
            if dSq < 15 then
                if 300 > degrees and degrees > 240 then
                    numTactics = numTactics + 1
                elseif 240 > degrees and degrees > 180 then
                    numFleet = numFleet + 1
                elseif 180 > degrees and degrees > 120 then
                    numStrategy = numStrategy + 1
                end
            end
        end
    end

    return numTactics, numFleet, numStrategy
end

-------------------------------------------------------------------------------

function getLowerNameToResourcesAndInfluence()
    if not _lowerNameToResourcesAndInfluence then
        _lowerNameToResourcesAndInfluence = {}
        for lowerName, planet in pairs(_systemHelper.planets()) do
            _lowerNameToResourcesAndInfluence[lowerName] = {
                resources = planet.resources or 0,
                influence = planet.influence or 0
            }
        end
        for lowerName, attributes in pairs(_systemHelper.nonPlanetResourceInfluenceCards()) do
            _lowerNameToResourcesAndInfluence[lowerName] = {
                resources = attributes.resources or 0,
                influence = attributes.influence or 0
            }
        end
    end
    return _lowerNameToResourcesAndInfluence
end

--- Get planet cards (and other relevant cards) not in a player's hand.
-- @return table : list of card objects.
function getCardsAndDecks()
    local inHandGuidSet = _zoneHelper.inHand()
    local cards = {}
    local decks = {}
    for _, object in ipairs(getAllObjects()) do
        if not inHandGuidSet[object.getGUID()] then
            if object.tag == 'Card' then
                table.insert(cards, object)
            elseif object.tag == 'Deck' then
                table.insert(decks, object)
            end
        end
    end
    return cards, decks
end

function getLowerCardNames(cards, decks)
    local lowerNameSet = getLowerNameToResourcesAndInfluence()
    local lowerCardNames = {}
    for _, card in ipairs(cards or {}) do
        local lowerName = string.lower(card.getName())
        if lowerNameSet[lowerName] then
            table.insert(lowerCardNames, lowerName)
        end
    end
    for _, deck in ipairs(decks or {}) do
        for _, entry in ipairs(deck.getObjects()) do
            local lowerName = string.lower(entry.name)
            if lowerNameSet[lowerName] then
                table.insert(lowerCardNames, lowerName)
            end
        end
    end
    return lowerCardNames
end

--- Get resources and influence from cards.
-- @param cards table : list of card objects.
-- @return number, number : total resources and influence.
function countResourcesAndInfluence(lowerCardNames)
    assert(type(lowerCardNames) == 'table')
    local lowerNameToResourcesAndInfluence = getLowerNameToResourcesAndInfluence()

    local resources = 0
    local influence = 0
    for _, lowerCardName in ipairs(lowerCardNames) do
        local ri = lowerNameToResourcesAndInfluence[lowerCardName]
        if ri then
            resources = resources + ri.resources
            influence = influence + ri.influence
        end
    end

    return resources, influence
end

-------------------------------------------------------------------------------

local _scoreboardGuid = false

function _getScoreboard()
    local scoreboard = _scoreboardGuid and getObjectFromGUID(_scoreboardGuid)
    if scoreboard then
        return scoreboard
    end
    for _, object in ipairs(getAllObjects()) do
        if object.getName() == 'Scoreboard' then
            _scoreboardGuid = object.getGUID()
            return object
        end
    end
end

--- Get the score from owner token on the scoreboard.
-- @param ownerTokenPositions table : list of owner token {xyz} positions.
-- @return score number.
function getScore(ownerTokenPositions)
    local scoreboard = _getScoreboard()

    local function scoreboardValue(ownerTokenPosition)
        -- DO NOT USE THE SCOREBOARD BOUNDING BOX, IT DOES NOT MATCH VISUAL!!
        local p = scoreboard.positionToLocal(ownerTokenPosition)
        if math.abs(p.z) > 0.5 then
            return false
        elseif p.x < -3.3 or p.x > 3.3 then
            return false
        end
        local u = -(p.x - 3.25) / 6.5
        local limit = 11
        if scoreboard.is_face_down then
            u = 1 - u
            limit = 15
        end
        return math.floor(u * limit)
    end

    local score = 0
    for _, ownerTokenPosition in ipairs(ownerTokenPositions) do
        score = math.max(score, scoreboardValue(ownerTokenPosition) or 0)
    end

    return score
end

-------------------------------------------------------------------------------

function getCommoditiesAndTradeGoods()
    local result = {}
    for _, object in ipairs(getAllObjects()) do
        if string.match(object.getName(), '^x([13]) Commodities/Tradegoods$') then
            table.insert(result, object)
        end
    end
    return result
end

function sumTradeGoodsValue(tradeGoods)
    assert(type(tradeGoods) == 'table')

    local result = 0
    for _, object in ipairs(tradeGoods) do
        local value = string.match(object.getName(), '^x([13]) Commodities/Tradegoods$')
        result = result + tonumber(value)
    end
    return result
end

-------------------------------------------------------------------------------

function updateNotes()
    startLuaCoroutine(self, 'updateNotesCoroutine')
end

function updateNotesCoroutine()
    -- Do not assume any object will still exist after yield.  Do separate
    -- table scans for each category and process just that category same frame.
    -- Yield before moving on.

    local commandTokens = getTokens('Command')
    local colorToCommandTokenPositions = {}
    for _, color in ipairs(_zoneHelper.zones()) do
        local positions = {}
        for _, commandToken in ipairs(filterTokens(color, commandTokens or {})) do
            table.insert(positions, commandToken.getPosition())
        end
        colorToCommandTokenPositions[color] = positions
    end
    coroutine.yield(0)

    local ownerTokens = getTokens('Owner')
    local colorToOwnerTokenPositions = {}
    for _, color in ipairs(_zoneHelper.zones()) do
        local positions = {}
        for _, ownerToken in ipairs(filterTokens(color, ownerTokens or {})) do
            table.insert(positions, ownerToken.getPosition())
        end
        colorToOwnerTokenPositions[color] = positions
    end
    coroutine.yield(0)

    local commoditiesAndTradeGoods = getCommoditiesAndTradeGoods()
    local commodities, tradeGoods = groupByFaceUpDown(commoditiesAndTradeGoods)
    local colorToCommodities = groupByPlayerZone(commodities)
    local colorToTradeGoods = groupByPlayerZone(tradeGoods)
    for _, color in ipairs(_zoneHelper.zones()) do
        local commodities = colorToCommodities[color] or {}
        colorToCommodities[color] = sumTradeGoodsValue(commodities)
        local tradeGoods = colorToTradeGoods[color] or {}
        colorToTradeGoods[color] = sumTradeGoodsValue(tradeGoods)
    end
    coroutine.yield(0)

    local cards, decks = getCardsAndDecks()
    local cardsUp, cardsDown = groupByFaceUpDown(cards)
    local decksUp, decksDown = groupByFaceUpDown(decks)
    local colorToCardsUp = groupByPlayerZone(cardsUp)
    local colorToCardsDown = groupByPlayerZone(cardsDown)
    local colorToDecksUp = groupByPlayerZone(decksUp)
    local colorToDecksDown = groupByPlayerZone(decksDown)
    local colorToLowerCardNamesUp = {}
    local colorToLowerCardNamesDown = {}
    for _, color in ipairs(_zoneHelper.zones()) do
        local cards = colorToCardsUp[color] or {}
        local decks = colorToDecksUp[color] or {}
        colorToLowerCardNamesUp[color] = getLowerCardNames(cards, decks)
        local cards = colorToCardsDown[color] or {}
        local decks = colorToDecksDown[color] or {}
        colorToLowerCardNamesDown[color] = getLowerCardNames(cards, decks)
    end
    coroutine.yield(0)

    -- Assemble the collections of strings for each row.
    local rows = {
        {
            PREFIX.LABEL .. '[' .. HEX_COLOR.LABEL .. ']',
            'VP',
            'R',
            'I',
            'C/TG',
            'T/F/S'
        }
    }
    for _, color in ipairs(_zoneHelper.zones()) do
        local ownerTokenPositions = colorToOwnerTokenPositions[color]
        local score = getScore(ownerTokenPositions)

        local lowerCardNamesUp = colorToLowerCardNamesUp[color] or {}
        local resourcesUp, influenceUp = countResourcesAndInfluence(lowerCardNamesUp)
        local lowerCardNamesDown = colorToLowerCardNamesDown[color] or {}
        local resourcesDown, influenceDown = countResourcesAndInfluence(lowerCardNamesDown)
        local resources = resourcesUp + resourcesDown
        local influence = influenceUp + influenceDown

        local commodities = colorToCommodities[color] or 0
        local tradeGoods = colorToTradeGoods[color] or 0

        local commandTokenPositions = colorToCommandTokenPositions[color] or {}
        local numTactics, numFleet, numStrategy = countCommandTokens(color, commandTokenPositions)

        table.insert(rows, {
            PREFIX[color] .. '[' .. HEX_COLOR[color] .. ']' .. color,
            string.format('%d', score),
            string.format('%d/%d', resourcesUp, resources),
            string.format('%d/%d', influenceUp, influence),
            string.format('%d/%d', commodities, tradeGoods),
            string.format('%d/%d/%d', numTactics, numFleet, numStrategy)
        })
    end
    coroutine.yield(0)

    -- Get widest entry for each column.
    local colWidth = {}
    for _, row in ipairs(rows) do
        for i, col in ipairs(row) do
            colWidth[i] = math.max(colWidth[i] or 0, string.len(col))
        end
    end

    local function pad(str, size)
        local d = math.max(size - string.len(str), 0)
        local left = d -- math.floor(d / 2.0)
        local right = d -- math.ceil(d / 2.0)
        local result = str
        local padChar = ' '
        for _ = 1, left do
            result = padChar .. result
        end
        for _ = 1, right do
            result = result .. padChar
        end
        return result
    end

    local gap = '    '
    for i, row in ipairs(rows) do
        for j, col in ipairs(row) do
            if j > 1 then
                row[j] = pad(row[j], colWidth[j])
            end
        end
        rows[i] = table.concat(row, gap) .. ' '
    end

    -- Optionally add to player notes, do this before prepending empty lines!
    local tabPrefix = 'Player stats when current turn (' .. (Turns.turn_color or 'N/A') .. ') started:'
    local tabMessage = tabPrefix .. '\n' .. table.concat(rows, '\n')
    local function getTab()
        local tabName = 'TI4 Stats'
        for _, tab in ipairs(Notes.getNotebookTabs()) do
            if tab.title == tabName then
                return tab
            end
        end
        local tab = {
            title = tabName,
            body  = '',
            color = 'Grey',
        }
        tab.index = Notes.addNotebookTab(tab)
        if tab.index >= 0 then
            return tab
        end
    end

    if _logNext then
        _logNext = false
        local tab = getTab()
        if tab then
            tab.body = tabMessage
            Notes.editNotebookTab(tab)
        end
    end

    -- Log to on-screen notes if updates are enabled.
    if _periodicUpdates then
        -- Prepend lines so text is bottom-aligned.
        while #rows < WINDOW_SIZE.ROWS do
            table.insert(rows, 1, '')
        end
        local notes = table.concat(rows, '\n')
        Notes.setNotes(notes)
    end

    return 1
end

-------------------------------------------------------------------------------

function _periodicUpdateNotes()
    updateNotes()
    _waitId = Wait.time(_periodicUpdateNotes, math.max(PERIODIC_SECONDS - 0.5 + math.random(), 0.1))
end

function togglePeriodicUpdates()
    _periodicUpdates = not _periodicUpdates
    if _periodicUpdates then
        startPeriodicUpdates()
    else
        stopPeriodicUpdates()
    end
end

function startPeriodicUpdates()
    if not _waitId then
        printToAll('Showing TI4 stats in notes (lower right).  Stats are score, resources/influence (ready and total), commodities/trade goods, and tactics/fleet/stategy command token counts.  To disable, either right-click the table and select "Hide TI4 Stats" to hide for all, or individual players may disable them via Menu -> Configuration -> Interface -> Notes.')
        -- Only update player notes when a turn starts.
    end
    if _waitId then
        -- Already running?  Stop and schedule the next soon.  Do not
        -- run now b/c a player may be spamming the menu item.
        Wait.stop(_waitId)
        _waitId = Wait.time(_periodicUpdateNotes, 1)
    else
        _periodicUpdateNotes()
    end
end

function stopPeriodicUpdates()
    if _waitId then
        Wait.stop(_waitId)
        _waitId = false
    end
    local function delayedClear()
        Notes.setNotes('')
    end
    Wait.frames(delayedClear, 2)
end

-------------------------------------------------------------------------------

function onLoad(save_state)
    addContextMenuItem('Toggle TI4 Stats', togglePeriodicUpdates)
    Notes.setNotes('')

    -- Only the GM/black player can see this object.  Others can still interact!
    local invisibleTo = {}
    for _, color in ipairs(Player.getColors()) do
        if color ~= 'Black' then
            table.insert(invisibleTo, color)
        end
    end
    self.setInvisibleTo(invisibleTo)
end

function onPlayerTurnStart(player_color_start, player_color_previous)
    -- Record the next "start of turn" upate in the notebook.
    _logNext = true

    -- ALWAYS update player notes, even if not enabled?
    -- No, if players want notes require them be enabled.
    -- if _waitId then
    --     Wait.stop(_waitId)
    -- end
    -- _waitId = Wait.time(_periodicUpdateNotes, 1)
end

-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)