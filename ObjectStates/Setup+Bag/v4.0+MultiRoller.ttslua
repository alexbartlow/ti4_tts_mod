--- TI4 multiRoller
-- @author the_Mantis
-- @author MrStump for dice rolling functions
-- @author Darrell use shared zone helper
-- @author Plat combine larger font size + scale for crisper text

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _unitHelper = getHelperClient('TI4_UNIT_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

local _unitTypeToFields = {}
local _amd = {}
local _ps = {}

local _lastUpdateFrame = false
local _unitAttrs = false
local _rollQueue = {}

local _injectExtraModifiers = false
local _updateWarnings = false

-------------------------------------------------------------------------------

--- Let outsiders ("auto-fill multiroller") set values and optionally roll.
function inject(params)
    assert(type(params) == 'table')
    assert(type(params.clickerColor) == 'string')
    assert(type(params.unitTypeToCount) == 'table')
    assert(type(params.plasmaScoring) == 'boolean')
    assert(type(params.antimassDeflectors) == 'boolean')
    assert((not params.rollType) or type(params.rollType) == 'string')
    assert((not params.extraModifiers) or type(params.extraModifiers) == 'table')

    -- Add these when gathering unit modifiers.
    _injectExtraModifiers = params.extraModifiers or false

    clickReset()

    for unitType, count in pairs(params.unitTypeToCount) do
        setCount(unitType, count)
    end

    params.plasmaScoring = params.plasmaScoring and true or false
    _ps.active = _ps.active and true or false
    if params.plasmaScoring ~= _ps.active then
        clickPS()
    end

    params.antimassDeflectors = params.antimassDeflectors and true or false
    _amd.active = _amd.active and true or false
    if params.antimassDeflectors ~= _amd.active then
        clickAMD()
    end

    updateUnitValues(true)

    -- Require click handling absorb these this frame, otherwise lost.
    _injectExtraModifiers = false

    local clickObject = self
    local clickerColor = params.clickerColor
    local altClick = false
    if params.rollType == 'antiFighterBarrage' then
        clickAFB(clickObject, clickerColor, altClick)
    elseif params.rollType == 'spaceCombat' or params.rollType == 'groundCombat' then
        clickCombat(clickObject, clickerColor, altClick)
    elseif params.rollType == 'spaceCannon' then
        clickSPC(clickObject, clickerColor, altClick)
    elseif params.rollType == 'bombardment' then
        clickBomb(clickObject, clickerColor, altClick)
    elseif params.rollType then
        error('unknown roll type ' .. params.rollType)
    end
end

-------------------------------------------------------------------------------

local UNIT_DATA = {
    {
        unitType = 'Flagship',
        antiFighterBarrage = true,
        combat = true,
        spaceCannon = true,
        bombardment = true
    },
    {
        unitType = 'War Sun',
        combat = true,
        bombardment = true
    },
    {
        unitType = 'Cruiser',
        combat = true,
        bombardment = true
    },
    {
        unitType = 'Dreadnought',
        combat = true,
        spaceCannon = true,
        bombardment = true
    },
    {
        unitType = 'Destroyer',
        antiFighterBarrage = true,
        combat = true,
        bombardment = true
    },
    {
        unitType = 'Carrier',
        combat = true,
        bombardment = true
    },
    {
        unitType = 'Fighter',
        combat = true,
        bombardment = true
    },
    {
        unitType = 'Infantry',
        combat = true,
    },
    {
        unitType = 'PDS',
        spaceCannon = true,
    },
    {
        unitType = 'Space Dock',
        spaceCannon = true,
    },
}

local DICE_COLOR = {
    ['Dreadnought'] = 'Purple',
    ['Flagship'] = 'Black',
    ['Destroyer'] = 'Red',
    ['War Sun'] = 'Orange',
    ['Carrier'] = 'Blue',
    ['Fighter'] = 'Teal',
    ['Infantry'] = 'Green',
    ['Cruiser'] = 'Brown',
    ['PDS'] = 'Orange',
    ['Space Dock'] = 'Yellow',
    ['Mech'] = 'Pink'
}

-------------------------------------------------------------------------------

function onLoad(saveState)
    createUi()
end

-------------------------------------------------------------------------------

function getInput(index)
    for _, input in ipairs(self.getInputs()) do
        if input.index == index then
            return input
        end
    end
end

function getButton(index)
    for _, button in ipairs(self.getButtons()) do
        if button.index == index then
            return button
        end
    end
end

function getCount(unitType)
    assert(type(unitType) == 'string')
    local input = getInput(_unitTypeToFields[unitType].count)
    return tonumber(input.value)
end

function setCount(unitType, count)
    assert(type(unitType) == 'string' and type(count) == 'number')
    local input = getInput(_unitTypeToFields[unitType].count)
    input.value = count
    self.editInput(input)
end

-------------------------------------------------------------------------------

function createUi()
    self.clearInputs()
    self.clearButtons()

    local count = {
        w = 72,
        h = 72,
        fontSize = 50
    }
    local plusMinus = {
        w = 50,
        h = 50,
        fontSize = 50
    }
    local hitValue = {
        w = 140,
        h = 72,
        fontSize = 50
    }
    local buttonValue = {
        w = 145,
        h = 72,
        fontSize = 40
    }
    local scaleUpDown = 4

    local xCount = -0.8
    local x0 = -0.1
    local y = 0.21
    local z = -0.9
    local dx = 0.3
    local dz = 0.167

    local nextIndex = 0
    for i, unitData in ipairs(UNIT_DATA) do
        local unitType = unitData.unitType
        _unitTypeToFields[unitType] = {}

        local function minus()
            setCount(unitType, math.max(getCount(unitType) - 1, 0))
            updateUnitValues()
        end
        local function plus()
            setCount(unitType, math.min(getCount(unitType) + 1, 100))
            updateUnitValues()
        end
        self.setVar('minus' .. i, minus)
        self.setVar('plus' .. i, plus)

        local x = xCount
        _unitTypeToFields[unitType].count = nextIndex
        nextIndex = nextIndex + 1
        self.createInput({
            input_function = 'doNothing',
            function_owner = self,
            label          = '',
            alignment      = 4,  -- right
            position       = { x = x, y = y, z = z },
            rotation       = { x = 0, y = 0, z = 0 },
            scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
            width          = count.w * scaleUpDown,
            height         = count.h * scaleUpDown,
            font_size      = count.fontSize * scaleUpDown,
            value          = 0,
            validation     = 2,  -- integer
            tab            = 1,  -- ignore
        })
        self.createButton({
            click_function = 'minus' .. i,
            function_owner = self,
            label          = '-',
            position       = { x = x - 0.12, y = y, z = z },
            rotation       = { x = 0, y = 0, z = 0 },
            scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
            width          = plusMinus.w * scaleUpDown,
            height         = plusMinus.h * scaleUpDown,
            font_size      = plusMinus.fontSize * scaleUpDown,
        })
        self.createButton({
            click_function = 'plus' .. i,
            function_owner = self,
            label          = '+',
            position       = { x = x + 0.12, y = y, z = z },
            rotation       = { x = 0, y = 0, z = 0 },
            scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
            width          = plusMinus.w * scaleUpDown,
            height         = plusMinus.h * scaleUpDown,
            font_size      = plusMinus.fontSize * scaleUpDown,
        })

        x = x0
        if unitData.antiFighterBarrage then
            _unitTypeToFields[unitType].antiFighterBarrage = nextIndex
            nextIndex = nextIndex + 1
            self.createInput({
                input_function = 'doNothing',
                function_owner = self,
                label          = '',
                alignment      = 4,  -- right
                position       = { x = x, y = y, z = z },
                rotation       = { x = 0, y = 0, z = 0 },
                scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
                width          = hitValue.w * scaleUpDown,
                height         = hitValue.h * scaleUpDown,
                font_size      = hitValue.fontSize * scaleUpDown,
                value          = 0,
                tab            = 1,  -- ignore
            })
        end

        x = x + dx
        if unitData.combat then
            _unitTypeToFields[unitType].combat = nextIndex
            nextIndex = nextIndex + 1
            self.createInput({
                input_function = 'doNothing',
                function_owner = self,
                label          = '',
                alignment      = 4,  -- right
                position       = { x = x, y = y, z = z },
                rotation       = { x = 0, y = 0, z = 0 },
                scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
                width          = hitValue.w * scaleUpDown,
                height         = hitValue.h * scaleUpDown,
                font_size      = hitValue.fontSize * scaleUpDown,
                value          = 0,
                tab            = 1,  -- ignore
            })
        end

        x = x + dx
        if unitData.spaceCannon then
            _unitTypeToFields[unitType].spaceCannon = nextIndex
            nextIndex = nextIndex + 1
            self.createInput({
                input_function = 'doNothing',
                function_owner = self,
                label          = '',
                alignment      = 4,  -- right
                position       = { x = x, y = y, z = z },
                rotation       = { x = 0, y = 0, z = 0 },
                scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
                width          = hitValue.w * scaleUpDown,
                height         = hitValue.h * scaleUpDown,
                font_size      = hitValue.fontSize * scaleUpDown,
                value          = 0,
                tab            = 1,  -- ignore
            })
        end

        x = x + dx
        if unitData.bombardment then
            _unitTypeToFields[unitType].bombardment = nextIndex
            nextIndex = nextIndex + 1
            self.createInput({
                input_function = 'doNothing',
                function_owner = self,
                label          = '',
                alignment      = 4,  -- right
                position       = { x = x, y = y, z = z },
                rotation       = { x = 0, y = 0, z = 0 },
                scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
                width          = hitValue.w * scaleUpDown,
                height         = hitValue.h * scaleUpDown,
                font_size      = hitValue.fontSize * scaleUpDown,
                value          = 0,
                tab            = 1,  -- ignore
            })
        end

        z = z + dz
    end

    local x = -0.8
    z = 0.85
    local dx = 0.32

    self.createButton({
        click_function = 'clickReset',
        function_owner = self,
        label          = 'RESET',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
        width          = buttonValue.w * scaleUpDown,
        height         = buttonValue.h * scaleUpDown,
        font_size      = buttonValue.fontSize * scaleUpDown,
        tooltip        = '',
    })

    x = x + dx
    self.createButton({
        click_function = 'clickUpdate',
        function_owner = self,
        label          = 'UPDATE',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
        width          = buttonValue.w * scaleUpDown,
        height         = buttonValue.h * scaleUpDown,
        font_size      = buttonValue.fontSize * scaleUpDown,
        tooltip        = '',
    })

    x = x + dx
    self.createButton({
        click_function = 'clickAFB',
        function_owner = self,
        label          = 'AFB',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
        width          = buttonValue.w * scaleUpDown,
        height         = buttonValue.h * scaleUpDown,
        font_size      = buttonValue.fontSize * scaleUpDown,
        tooltip        = '',
    })

    x = x + dx
    self.createButton({
        click_function = 'clickCombat',
        function_owner = self,
        label          = 'CMBT',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
        width          = buttonValue.w * scaleUpDown,
        height         = buttonValue.h * scaleUpDown,
        font_size      = buttonValue.fontSize * scaleUpDown,
        tooltip        = '',
    })

    x = x + dx
    self.createButton({
        click_function = 'clickSPC',
        function_owner = self,
        label          = 'SPC',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
        width          = buttonValue.w * scaleUpDown,
        height         = buttonValue.h * scaleUpDown,
        font_size      = buttonValue.fontSize * scaleUpDown,
        tooltip        = '',
    })

    x = x + dx
    self.createButton({
        click_function = 'clickBomb',
        function_owner = self,
        label          = 'BOMB',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
        width          = buttonValue.w * scaleUpDown,
        height         = buttonValue.h * scaleUpDown,
        font_size      = buttonValue.fontSize * scaleUpDown,
        tooltip        = '',
    })

    z = z - dz
    _ps.index = #self.getButtons()
    self.createButton({
        click_function = 'clickPS',
        function_owner = self,
        label          = 'PS',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
        width          = buttonValue.w * scaleUpDown,
        height         = buttonValue.h * scaleUpDown,
        font_size      = buttonValue.fontSize * scaleUpDown,
        tooltip        = 'Click to toggle Plasma Scoring',
    })

    z = z - dz
    _amd.index = #self.getButtons()
    self.createButton({
        click_function = 'clickAMD',
        function_owner = self,
        label          = 'AMD',
        position       = { x = x, y = y, z = z },
        rotation       = { x = 0, y = 0, z = 0 },
        scale          = { x = 1 / scaleUpDown, y = 1, z = 1 / scaleUpDown },
        width          = buttonValue.w * scaleUpDown,
        height         = buttonValue.h * scaleUpDown,
        font_size      = buttonValue.fontSize * scaleUpDown,
        tooltip        = 'Click to toggle Antimass Deflectors',
    })

end

function doNothing() end

-------------------------------------------------------------------------------

function clickReset(clickObject, clickerColor, altClick)
    for _, input in ipairs(self.getInputs()) do
        input.value = 0
        self.editInput(input)
    end
    if _ps.active then
        clickPS()
    end
    if _amd.active then
        clickAMD()
    end
    Roller.reset()
end

function clickUpdate(clickObject, clickerColor, altClick)
    updateUnitValues()
    printUnitModifiers(clickerColor)
end

function clickAFB(clickObject, clickerColor, altClick)
    roll(clickerColor, 'ANTI-FIGHTER BARRAGE', { 'antiFighterBarrage' })
end

function clickCombat(clickObject, clickerColor, altClick)
    roll(clickerColor, 'COMBAT', { 'spaceCombat', 'groundCombat' })
end

function clickSPC(clickObject, clickerColor, altClick)
    roll(clickerColor, 'SPACE CANNON', { 'spaceCannon' })
end

function clickBomb(clickObject, clickerColor, altClick)
    roll(clickerColor, 'BOMBARDMENT', { 'bombardment' })
end

function clickPS(clickObject, clickerColor, altClick)
    _ps.active = not _ps.active
    local button = getButton(_ps.index)
    button.color = _ps.active and 'Green' or 'White'
    self.editButton(button)
    updateUnitValues()
end

function clickAMD(clickObject, clickerColor, altClick)
    _amd.active = not _amd.active
    local button = getButton(_amd.index)
    button.color = _amd.active and 'Green' or 'White'
    self.editButton(button)
    updateUnitValues()
end

-------------------------------------------------------------------------------

function myColor()
    local p0 = self.getPosition()
    local best = false
    local bestDistanceSq = false
    for _, attrs in ipairs(_zoneHelper.zonesAttributes()) do
        local p1 = attrs.center
        local dSq = (p0.x - p1.x) ^ 2 + (p0.z - p1.z) ^ 2
        if (not best) or dSq < bestDistanceSq then
            best = attrs.color
            bestDistanceSq = dSq
        end
    end
    return best
end

function getName(color)
    local player = Player[color]
    return player and player.steam_name or color
end

function updateUnitValues(force)
    if (not force) and _lastUpdateFrame == Time.frame_count then
        return
    end
    _lastUpdateFrame = Time.frame_count
    _updateWarnings = false

    local color = myColor()

    local unitTypeToCount = {}
    for _, unitData in ipairs(UNIT_DATA) do
        unitTypeToCount[unitData.unitType] = getCount(unitData.unitType)
    end

    local unitOverrides = _unitHelper.getColorToUnitOverrides()[color] or {}
    local unitModifiers = _unitHelper.getColorToUnitModifiers()[color] or {}

    -- Remove PS if not selected.
    if _ps.active then
        local found = false
        for _, modifier in ipairs(unitModifiers) do
            if modifier == 'Plasma Scoring' then
                found = true
                break
            end
        end
        if not found then
            -- Plasma scoring not detected, but is enabled.
            _updateWarnings = _updateWarnings or {}
            table.insert(_updateWarnings, 'PS enabled but missing Plasma Scoring technology')
            table.insert(unitModifiers, 'Plasma Scoring')
        end
    else
        for i = #unitModifiers, 1, -1 do
            if unitModifiers[i] == 'Plasma Scoring' then
                -- Plasma scoring detected, but disabled.
                _updateWarnings = _updateWarnings or {}
                table.insert(_updateWarnings, 'PS disabled but have Plasma Scoring technology')
                table.remove(unitModifiers, i)
            end
        end
    end

    -- Auto-fill may know about modifiers.
    if _injectExtraModifiers then
        local unitModifiersSet = {}
        for _, unitModifier in ipairs(unitModifiers) do
            unitModifiersSet[unitModifier] = true
        end
        for _, unitModifier in ipairs(_injectExtraModifiers) do
            if not unitModifiersSet[unitModifier] then
                table.insert(unitModifiers, unitModifier)
            end
        end
    end

    _unitAttrs = _unitHelper.getUnitAttributes(unitOverrides)

    -- Apply flagships.
    _unitAttrs = _unitHelper.applyFlagshipModifiers({
        unitAttrs = assert(_unitAttrs),
        myUnitTypeToCount = unitTypeToCount,
        opponentUnitTypeToCount = false
    })

    -- Apply unit modifiers.
    _unitAttrs = _unitHelper.applyUnitModifiers({
        unitAttrs = assert(_unitAttrs),
        myColor = color,
        myUnitModifiers = unitModifiers,
        myUnitTypeToCount = unitTypeToCount,
        opponentColor = false,
        opponentUnitModifiers = _amd.active and { 'Antimass Deflectors' },
        opponentUnitTypeToCount = false
    })

    local function updateInput(unitType, inputField, hitAndDice)
        assert(type(unitType) == 'string' and type(inputField) == 'string')
        local fields = _unitTypeToFields[unitType]
        local index = fields and fields[inputField]
        local input = index and getInput(index)
        if input then
            if hitAndDice and getCount(unitType) > 0 then
                local extra = hitAndDice.extraDice and hitAndDice.extraDice > 0
                input.value = hitAndDice.hit .. 'x' .. hitAndDice.dice .. (extra and '+' or '')
            else
                input.value = 0
            end
            self.editInput(input)
        end
    end

    for unitType, attrs in pairs(_unitAttrs) do
        updateInput(unitType, 'antiFighterBarrage', attrs.antiFighterBarrage)
        updateInput(unitType, 'combat', attrs.spaceCombat or attrs.groundCombat)
        updateInput(unitType, 'spaceCannon', attrs.spaceCannon)
        updateInput(unitType, 'bombardment', attrs.bombardment)
    end
end

function printUnitModifiers(dstColor)
    local modifiers = {}
    for _, modifier in ipairs(_unitAttrs._flagshipModifiers) do
        table.insert(modifiers, modifier.name .. ' (' .. modifier.description .. ')')
    end
    for _, modifier in ipairs(_unitAttrs._unitModifiers) do
        table.insert(modifiers, modifier.name .. ' (' .. modifier.description .. ')')
    end
    local msg = 'Roll Modifiers detected: ' .. ((#modifiers > 0) and table.concat(modifiers, ', ') or 'none')
    for _, warning in ipairs(_updateWarnings or {}) do
        msg = msg .. '\n' .. 'WARNING: ' .. warning
    end
    local msgColor = assert(myColor())
    if dstColor then
        printToColor(msg, dstColor, msgColor)
    else
        printToAll(msg, msgColor)
    end
end

function roll(clickerColor, rollLabel, rollTypes)
    assert(type(clickerColor) == 'string' and type(rollLabel) == 'string' and type(rollTypes) == 'table')

    if Roller.isRollInProgress() then
        broadcastToColor('Dice are already being rolled.', clickerColor, {0.8,0.2,0.2})
        return
    end
    Roller.reset()

    updateUnitValues()
    printUnitModifiers()

    assert(#Roller._dice == 0)
    local foundUnits = false
    for _, unitData in ipairs(UNIT_DATA) do
        local unitType = unitData.unitType
        local unitName = _unitAttrs[unitType].name or unitType
        for _, rollType in ipairs(rollTypes) do
            local hitAndDice = _unitAttrs[unitType][rollType]
            local unitCount = getCount(unitType)
            if hitAndDice and unitCount > 0 then
                foundUnits = true
                Roller.addDice({
                    unitName = unitName,
                    diceColor = DICE_COLOR[unitType],
                    diceCount = unitCount * hitAndDice.dice + (hitAndDice.extraDice or 0),
                    hitValue = hitAndDice.hit,
                    critValue = hitAndDice.extraHitsOn and hitAndDice.extraHitsOn.value,
                    critCount = hitAndDice.extraHitsOn and hitAndDice.extraHitsOn.count,
                })
            end
        end
    end

    local playerColor = myColor()
    if not foundUnits then
        printToAll('No valid units for ' .. rollLabel, playerColor)
    else
        Roller.roll(playerColor, rollLabel)
    end
end

-------------------------------------------------------------------------------

-- Split out dice rolling into this self-contained "class".
Roller = {
    DICE_POSITION_RADIUS = 5,
    DICE_POSITION_HEIGHT = 4,

    _dice = {},
    _rollInProgressTimestamp = false,
    _rollQueue = {}
}

function Roller.isRollInProgress()
    local timeout = Roller._rollInProgressTimestamp and (Roller._rollInProgressTimestamp + 10)
    print('xxx ' .. (timeout or '-') .. ' < ' .. Time.time)
    local result = timeout and (timeout > Time.time)
    print('xxx2 ' .. tostring(result or '-'))
    return result
end

function Roller._setRollInProgress(isActive)
    assert(type(isActive) == 'boolean')
    Roller._rollInProgressTimestamp = isActive and Time.time or false
end

function Roller.reset()
    Roller._removeDice()
    Roller._dice = {}
end

function Roller._removeDice()
    for _, dice in ipairs(Roller._dice) do
        for _, guid in ipairs(dice._guids or {}) do
            local object = getObjectFromGUID(guid)
            if object then
                destroyObject(object)
            end
        end
        dice._guids = nil
    end
end

function Roller.addDice(params)
    assert(type(params.diceColor) == 'string', 'bad diceColor')
    assert(type(params.diceCount) == 'number', 'bad diceCount')
    assert(type(params.unitName) == 'string', 'bad unitName')
    assert(type(params.hitValue) == 'number', 'bad hitValue')
    assert((not params.critValue) or type(params.critValue) == 'number', 'bad critValue')
    assert((not params.critCount) or type(params.critCount) == 'number', 'bad critCount')

    -- Make a copy in case original gets mutated somehow.
    local copy = {}
    for k, v in pairs(params) do
        copy[k] = v
    end
    table.insert(Roller._dice, copy)
end

function Roller.roll(playerColor, rollLabel)
    assert(type(playerColor) == 'string', 'bad playerColor')
    assert(type(rollLabel) == 'string', 'bad rollLabel')

    local playerName = Player[playerColor] and Player[playerColor].steam_name or playerColor
    table.insert(Roller._rollQueue, {
        playerColor = playerColor,
        playerName = playerName,
        rollLabel = rollLabel
    })
    startLuaCoroutine(self, 'Roller_RollDiceCoroutine')
end

function Roller._randomRotation()
    --Credit for this function goes to Revinor (forums)
    --Get 3 random numbers
    local u1 = math.random()
    local u2 = math.random()
    local u3 = math.random()
    --Convert them into quats to avoid gimbal lock
    local u1sqrt = math.sqrt(u1)
    local u1m1sqrt = math.sqrt(1-u1)
    local qx = u1m1sqrt *math.sin(2*math.pi*u2)
    local qy = u1m1sqrt *math.cos(2*math.pi*u2)
    local qz = u1sqrt *math.sin(2*math.pi*u3)
    local qw = u1sqrt *math.cos(2*math.pi*u3)
    --Apply rotation
    local ysqr = qy * qy
    local t0 = -2.0 * (ysqr + qz * qz) + 1.0
    local t1 = 2.0 * (qx * qy - qw * qz)
    local t2 = -2.0 * (qx * qz + qw * qy)
    local t3 = 2.0 * (qy * qz - qw * qx)
    local t4 = -2.0 * (qx * qx + ysqr) + 1.0
    --Correct
    if t2 > 1.0 then t2 = 1.0 end
    if t2 < -1.0 then ts = -1.0 end
    --Convert back to X/Y/Z
    local xr = math.asin(t2)
    local yr = math.atan2(t3, t4)
    local zr = math.atan2(t1, t0)
    --Return result
    return {math.deg(xr),math.deg(yr),math.deg(zr)}
end

function Roller_RollDiceCoroutine()
    local params = table.remove(Roller._rollQueue)
    if not params then
        return 1
    end
    local playerColor = params.playerColor
    local playerName = params.playerName
    local rollLabel = params.rollLabel

    if Roller.isRollInProgress() then
        printToColor('Dice are already being rolled.', playerColor, {0.8,0.2,0.2})
        return
    end
    Roller._setRollInProgress(true)
    printToAll(playerName .. ' rolling for ' .. rollLabel, playerColor)

    math.randomseed(os.time())

    -- Remove any existing dice.
    Roller._removeDice()

    -- Create dice, with random initial rotations.
    local totalDiceCount = 0
    for _, dice in ipairs(Roller._dice) do
        totalDiceCount = totalDiceCount + dice.diceCount
    end
    local nextDieIndex = 1
    for _, dice in ipairs(Roller._dice) do
        dice._objects = {}
        for _ = 1, dice.diceCount do
            local pos = self.getPosition()
            local phi = math.rad(nextDieIndex * 360 / totalDiceCount)
            nextDieIndex = nextDieIndex + 1
            local die = spawnObject({
                type = 'Die_10',
                position = {
                    x = pos.x + Roller.DICE_POSITION_RADIUS * math.cos(phi),
                    y = pos.y + Roller.DICE_POSITION_HEIGHT,
                    z = pos.z + Roller.DICE_POSITION_RADIUS * math.sin(phi),
                },
                rotation = Roller._randomRotation(),
            })
            die.setName(dice.unitName)
            die.setColorTint(Color.fromString(dice.diceColor))
            table.insert(dice._objects, die)
        end
    end
    for _, dice in ipairs(Roller._dice) do
        dice._guids = {}  -- not safe to read immediately after spawn, can change
        for _, die in pairs(dice._objects) do
            while die.spawning do
                coroutine.yield(0)
            end
            table.insert(dice._guids, die.getGUID())
        end
        dice._objects = nil
    end
    coroutine.yield(0)

    -- Roll!
    for _, dice in ipairs(Roller._dice) do
        for _, guid in ipairs(dice._guids) do
            local die = getObjectFromGUID(guid)
            die.interactable = false
            die.roll()
        end
    end
    coroutine.yield(0)

    -- Wait for dice, extract roll values.
    local timeout = Time.time + 3
    for _, dice in ipairs(Roller._dice) do
        dice._rollValues = {}
        for _, guid in ipairs(dice._guids) do
            local die = false
            while true do
                die = getObjectFromGUID(guid)  -- re-get every time, can be deleted
                if die and (not die.resting) and Time.time < timeout then
                    coroutine.yield(0)
                else
                    break
                end
            end
            if die then
                table.insert(dice._rollValues, die.getValue() or 0)
                die.interactable = true
            end
        end
    end
    coroutine.yield(0)

    -- Generate report.
    local message = {}
    local hits = 0
    for _, dice in ipairs(Roller._dice) do
        local item = '[HIT:' .. dice.hitValue
        if dice.critCount and dice.critValue then
            item = item .. ', CRIT(x' .. (dice.critCount + 1) .. '):' .. dice.critValue
        end
        item = item .. ']: '

        local rollValues = {}
        for _, rollValue in ipairs(dice._rollValues) do
            local suffix = ''
            if rollValue >= dice.hitValue then
                hits = hits + 1
                suffix = '#'
            end
            if dice.critCount and dice.critValue and rollValue >= dice.critValue then
                hits = hits + dice.critCount
                for _ = 1, dice.critCount do
                    suffix = suffix .. '#'
                end
            end
            table.insert(rollValues, rollValue .. suffix)
        end
        table.insert(message, dice.unitName .. ' ' .. item .. table.concat(rollValues, ', '))
    end
    broadcastToAll(playerName .. ' rolled: [ffffff]' .. table.concat(message, ', '), playerColor)
    broadcastToAll(playerName .. ' landed ' .. hits .. ' hit' .. (hits == 1 and '' or 's') .. '.', playerColor)

    Roller._setRollInProgress(false)
    return 1
end

-------------------------------------------------------------------------------

-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)