function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end

local _factionHelper = getHelperClient('TI4_FACTION_HELPER')
local _setupHelper = getHelperClient('TI4_SETUP_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

function onLoad()
    createButtons()
end

function createButtons()
    self.createButton({
        click_function = 'clickSetup',
        function_owner = self,
        label          = 'Unpack\nFaction Box',
        position       = {x=0, y=0.2, z=0},
        width          = 1400,
        height         = 800,
        font_size      = 200,
        tooltip = 'Unpacks Faction Components'
    })
end

function clickSetup(_, playerColor)
    local color = _zoneHelper.zoneFromPosition(self.getPosition())
    if not color then
        error('Unpack: button not inside player zone')
    end

    if _factionHelper.isFrankenEnabled() then
        _setupHelper.unpackFranken({
            color = color,
            unpackButtonGuid = self.getGUID()
        })
    else
        _setupHelper.unpackFaction({
            color = color,
            unpackButtonGuid = self.getGUID()
        })
    end
end

-------------------------------------------------------------------------------
--- Partially lock the _G global variable table.
-- Include this AFTER creating any necessary globals to prevent new ones.
--
-- - Existing globals can still be read AND WRITTEN.
-- - Cannot read non-existent globals.
-- - Cannot write new globals.
--
-- This helps catch typos where what was meant to access a local instead
-- references a (hopefully non-existent) global, as well as forgetting to use
-- "local" when creating objects.
--
-- @author Darrell
-------------------------------------------------------------------------------
-- Index is only called when the key does not already exist.
local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)
