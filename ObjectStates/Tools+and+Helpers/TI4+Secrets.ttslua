--- Display which secrets have been played (and which remain)
-- @author Darrell

local SECRETS = {
    ['Become the Gatekeeper'] = 'ALPHA AND BETA',
    ['Mine Rare Metals'] = '4 HAZARDOUS',
    ['Forge An Alliance'] = '4 CULTURAL',
    ['Monopolize Production'] = '4 INDUSTRIAL',
    ['Cut Supply Lines'] = 'BLOCKADE SD',
    ['Occupy the Seat of the Empire'] = 'MR W/ 3 SHIPS',
    ['Learn Secrets of the Cosmos'] = '3 ADJ TO ANOMALY',
    ['Control the Region'] = '6 SYSTEMS',
    ['Threaten Enemies'] = 'SYS ADJ TO HOME',
    ['Adapt New Strategies'] = '2 FACTION TECH',
    ['Master the Laws of Physics'] = '4 TECH 1 COLOR',
    ['Gather A Mighty Fleet'] = '5 DREADNOUGHTS',
    ['Form a Spy Network'] = '5 ACTION CARDS',
    ['Fuel the War Machine'] = '3 SPACE DOCKS',
    ['Establish A Perimeter'] = '4 PDS',
    ['Make an Example of Their World'] = 'BOMBARD LAST GF',
    ['Turn Their Fleets to Dust'] = 'SPC LAST SHIP',
    ['Destroy Their Greatest Ship'] = 'DESTORY WS/FLAG',
    ['Unveil Flagship'] = 'WIN W/ FLAGSHIP',
    ['Spark a Rebellion'] = 'WIN VS LEADER',
}

function getSecrets()
    local inHandGuidSet = {}
    for _, player in ipairs(Player.getPlayers()) do
        for i = 1, player.getHandCount() do
            for _, object in ipairs(player.getHandObjects(i)) do
                inHandGuidSet[object.guid] = true
            end
        end
    end

    local function isPlayedSecret(object)
        if object.tag ~= 'Card' then
            return false
        end
        if inHandGuidSet[object.getGUID()] then
            return false
        end
        if object.is_face_down then
            return false
        end
        return SECRETS[object.getName()]
    end

    local played = {}
    for _, object in ipairs(getAllObjects()) do
        if isPlayedSecret(object) then
            local name = object.getName()
            played[name] = SECRETS[name]
        end
    end

    local remain = {}
    for secret, v in pairs(SECRETS) do
        if not played[secret] then
            remain[secret] = v
        end
    end

    return played, remain
end

local function sortedKeys(t)
    local result = {}
    for k, _ in pairs(t) do
        table.insert(result, k)
    end
    table.sort(result)
    return result
end

function updateSecrets()
    local played, remain = getSecrets()

    local buttonIndexToSecret = {}
    for i, secret in ipairs(sortedKeys(SECRETS)) do
        buttonIndexToSecret[(i - 1) * 2] = secret
    end

    for _, button in ipairs(self.getButtons()) do
        local secret = buttonIndexToSecret[button.index]
        if secret then
            local label = played[secret] and ('[s]' .. secret .. '[/s]') or secret
            if button.label ~= label then
                button.label = label
                self.editButton(button)
            end
        end
    end
end

function doNothing()
end

function onLoad(save_state)
    math.randomseed(tonumber(self.getGUID(), 16))

    local scaleUpDownHack = 4

    for i, secret in ipairs(sortedKeys(SECRETS)) do
        local row = math.floor((i - 1) / 2)
        local col = (i - 1) % 2

        local buttonParams = {
            click_function = 'doNothing',
            function_owner = self,
            label          = secret,
            position       = {
                x = -0.7 + (col * 1.4),
                y = 0.21,
                z = -0.86 + (row * 0.19),
            },
            rotation       = { x = 0, y = 0, z = 0 },
            width          = 0,
            height         = 0,
            font_size      = 45 * scaleUpDownHack,
            scale          = { x = 1 / scaleUpDownHack, y = 1, z = 1 / scaleUpDownHack },
        }
        self.createButton(buttonParams)

        local buttonParams2 = {
            click_function = 'doNothing',
            function_owner = self,
            label          = SECRETS[secret],
            position       = {
                x = buttonParams.position.x,
                y = buttonParams.position.y,
                z = buttonParams.position.z + 0.075
            },
            rotation       = { x = 0, y = 0, z = 0 },
            width          = 0,
            height         = 0,
            font_size      = 20 * scaleUpDownHack,
            scale          = { x = 1 / scaleUpDownHack, y = 1, z = 1 / scaleUpDownHack },
        }
        self.createButton(buttonParams2)
    end

    self.addContextMenuItem('Update Secrets', updateSecrets, false)

    Wait.time(periodicUpdateSecrets, math.random())
end

function periodicUpdateSecrets()
    updateSecrets()
    Wait.time(periodicUpdateSecrets, 9 + (math.random() * 2))
end