--- Prepare table for Franken!
-- @author Darrell

-- Per-zone:
-- Frankenstein Checklist
-- 2 bags

-- TI4 Frankenstein MultiRoller

function getHelperClient(helperObjectName)
    local function getHelperObject()
        for _, object in ipairs(getAllObjects()) do
            if object.getName() == helperObjectName then return object end
        end
        error('missing object "' .. helperObjectName .. '"')
    end
    local helperObject = false
    local function getCallWrapper(functionName)
        helperObject = helperObject or getHelperObject()
        if not helperObject.getVar(functionName) then error('missing ' .. helperObjectName .. '.' .. functionName) end
        return function(parameters) return helperObject.call(functionName, parameters) end
    end
    return setmetatable({}, { __index = function(t, k) return getCallWrapper(k) end })
end
local _factionHelper = getHelperClient('TI4_FACTION_HELPER')
local _zoneHelper = getHelperClient('TI4_ZONE_HELPER')

-- Unpack items directly to these positions.
local UNPACK_TRANSFORMS = {
    ['Faction Sheets/Tokens'] = {
        position = {70, 2, 18},
    },
    ['Base Unit Tiles'] = {
        position = {70, 2, 15},
    },
    ['Non Draft Parts'] = {
        position = {70, 2, 12},
    },
    ['A. Draft'] = {
        position = {79, 2, -17},
        rotation = {0, 90, 0},
    },
    ['B. Build Galaxy'] = {
        position = {76, 3, -17},
        rotation = {0, 90, 0},
    },
    ['C. Reveal'] = {
        position = {73, 4, -17},
        rotation = {0, 90, 0},
    },
    ['D. Build Factions'] = {
        position = {70, 5, -17},
        rotation = {0, 90, 0},
    },
    ['Home Planet Cards'] = {
        position = {61.23, 1.85, 2.05},
        rotation = {0, 90, 0},
    },
}

local UNPACK_TO_BAGS = {
    ['Promissory Notes'] = 2,
    ['Home Systems'] = 2,
    ['Flagships'] = 2,
    ['Starting Techs'] = 2,
    ['Commodity Tiles'] = 2,
    ['Starting Units'] = 2,
    ['Faction Abilities'] = 4,
    ['Faction Techs'] = 3,
}

local UNPACK_TO_BAGS_BLU = {
    ['Promissory Notes'] = 2,
    ['Home Systems'] = 2,
    ['Flagships'] = 2,
    ['Starting Techs'] = 2,
    ['Commodity Tiles'] = 3,
    ['Starting Units'] = 2,
    ['Faction Abilities'] = 5,
    ['Faction Techs'] = 4
}

-- Index by player count (1 not allowed).  Based on setup instruction counts.
local EXTERNAL_TO_BAGS = {
    ['Blue Planet Tiles'] = { -1, 7, 6, 5, 4, 3, 2, 2 },
    ['Red Anomaly Tiles'] = { -1, 2, 2, 3, 2, 2, 1, 1 },
}

local CLONE_TO_HIDDEN = {
    'Frankenstein Checklist',
}

local HIDDEN_ZONE_SCALE = { x = 20, y = 6, z = 10 }
local HIDDEN_ZONE_NAME = 'FrankenZone'

local MAX_UI_ROWS = 25

local _useToggles = false
local _toggles = false

-------------------------------------------------------------------------------

local function getHiddenZoneTransforms()
    local result = {}
    for _, zoneAttributes in ipairs(_zoneHelper.zonesAttributes()) do
        local color = assert(zoneAttributes.color)
        result[color] = {
            position = {
                x = zoneAttributes.center.x,
                y = zoneAttributes.center.y + HIDDEN_ZONE_SCALE.y / 2,
                z = zoneAttributes.center.z + 9 * (zoneAttributes.center.z > 0 and -1 or 1)
            },
            rotation = zoneAttributes.rotation
        }
    end
    return result
end

-------------------------------------------------------------------------------

local function getEntryGuid(container, name)
    for _, entry in ipairs(container.getObjects()) do
        if entry.name == name then
            return entry.guid
        end
    end
    error('no entry "' .. name .. '"')
end

local function takeToAbove(container, name)
    local guid = getEntryGuid(container, name)
    local pos = container.getPosition()
    local object = self.takeObject({
        position = { pos.x, pos.y + 5, pos.z },
        guid = guid,
        smooth = false
    })
    assert(object)
    return object
end

local function packFactions()
    for _, object in ipairs(getAllObjects()) do
        if object.tag == 'Bag' and object.getName() == 'Factions' and object.getVar('packBoxes') then
            object.call('packBoxes')
            break
        end
    end
end

local function createPackBagsHiddenZone()
    local hiddenZone = spawnObject({
        type              = 'FogOfWarTrigger',
        position          = { x = 0, y = 10, z = 0 },
        rotation          = { x = 0, y = 0, z = 0 },
        scale             = { x = 20, y = 20, z = 20 },
        callback_fucntion = nil,
        sound             = false,
        params            = {},
        snap_to_grid      = false,
    })
    hiddenZone.setValue('Teal')
    return hiddenZone
end

local function createHiddenZones()
    for color, transform in pairs(getHiddenZoneTransforms()) do
        local hiddenZone = spawnObject({
            type              = 'FogOfWarTrigger',
            position          = transform.position,
            rotation          = transform.rotation,
            scale             = HIDDEN_ZONE_SCALE,
            callback_fucntion = nil,
            sound             = false,
            params            = {},
            snap_to_grid      = false,
        })
        hiddenZone.setValue(color)
        hiddenZone.setName(HIDDEN_ZONE_NAME)
        coroutine.yield(0)
    end
end

local function cloneToHidden(name)
    local object = takeToAbove(self, name)
    coroutine.yield(0)
    local json = object.getJSON()
    destroyObject(object)

    for _, transform in pairs(getHiddenZoneTransforms()) do
        local clone = spawnObjectJSON({
            json = json,
            position = transform.position,
            rotation = transform.rotation,
            sound             = false,
            snap_to_grid      = false,
        })
        clone.use_grid = false
        clone.use_snap_points = false
        clone.sticky = false
        coroutine.yield(0)
    end
end

local function createHiddenBags()
    for _, transform in pairs(getHiddenZoneTransforms()) do
        local p = transform.position
        local deltas = {
            { x = 4, y = 0, z = 0 },
            { x = 8, y = 4, z = 0 },
        }
        for _, delta in ipairs(deltas) do
            local bag = spawnObject({
                type = 'Bag',
                position = { p.x + delta.x, p.y + delta.y, p.z + delta.z },
                sound = false,
                snap_to_grid = true,
            })
            bag.use_grid = true
            bag.use_snap_points = false
            bag.sticky = false
            coroutine.yield(0)
        end
        coroutine.yield(0)
    end
end

local function unpackToTable()
    for name, transform in pairs(UNPACK_TRANSFORMS) do
        local guid = getEntryGuid(self, name)
        self.takeObject({
            position = transform.position,
            rotation = transform.rotation,
            guid = guid,
        })
        coroutine.yield(0)
        coroutine.yield(0)
        coroutine.yield(0)
    end
end

-------------------------------------------------------------------------------

local function createBags()
    local result = {}
    for _, zoneAttributes in ipairs(_zoneHelper.zonesAttributes()) do
        local p = zoneAttributes.center
        local magnitude = math.sqrt(p.x ^ 2 + p.z ^2)
        local normalized = { x = p.x / magnitude, y = p.y, z = p.z / magnitude }
        p = {
            x = normalized.x * 7,
            y = p.y + 3,
            z = normalized.z * 7
        }
        local bag = spawnObject({
            type              = 'Bag',
            position          = p,
            sound             = false,
            snap_to_grid      = true,
        })
        bag.use_grid = true
        bag.use_snap_points = false
        bag.setColorTint(zoneAttributes.color or 'White')
        table.insert(result, bag)
    end
    return result
end

local function unpackToBags(bags)
    local unpackSet = UNPACK_TO_BAGS

    -- Override unpack counts for FrankenBlu.
    local tint = self.getColorTint()
    tint = string.upper(Color(tint.r, tint.g, tint.b, 1):toHex())
    if tint == '005DC7' then
        print('Using larger unpack numbers for FrankenBlu')
        unpackSet = UNPACK_TO_BAGS_BLU
    end

    for name, count in pairs(unpackSet) do
        local container = takeToAbove(self, name)
        assert(container, 'missing ' .. name)
        coroutine.yield(0)
        container.setLock(true)

        while container.spawning do
            coroutine.yield(0)
        end
        coroutine.yield(0)

        container.shuffle()

        -- Get available guids (after shuffle).
        -- IF TOO FEW, TAKE WILL GET AN ENTRY AT RANDOM.
        local guids = {}
        for _, entry in ipairs(container.getObjects()) do
            if (not _useToggles) or _toggles[entry.guid] then
                table.insert(guids, entry.guid)
            end
        end

        if #guids < (#bags * count) then
            error('too few "' .. name .. '" entries selected')
        end

        for _, bag in ipairs(bags) do
            for _ = 1, count do
                local pos = bag.getPosition()
                local object = container.takeObject({
                    guid = table.remove(guids),
                    position = { x = pos.x, y = pos.y + 5, z = pos.z },
                    smooth = false,
                    callback_function = function(object) bag.putObject(object) end
                })
                coroutine.yield(0)
            end
            coroutine.yield(0)
        end

        for _ = 1, 30 do
            coroutine.yield(0)
        end
        container.setLock(false)
        self.putObject(container)
    end

    local numPlayers = _zoneHelper.getPlayerCount()
    for name, perPlayerCounts in pairs(EXTERNAL_TO_BAGS) do
        local count = perPlayerCounts[numPlayers]
        local function getExternal()
            for _, object in ipairs(getAllObjects()) do
                if object.getName() == name then
                    return object
                end
            end
            error('missing "' .. name .. '"')
        end
        local external = getExternal()
        coroutine.yield(0)

        external.shuffle()
        coroutine.yield(0)

        for _, bag in ipairs(bags) do
            for i = 1, count do
                local pos = bag.getPosition()
                local object = external.takeObject({
                    position = { x = pos.x, y = pos.y + 5 + i, z = pos.z },
                    smooth = false,
                    callback_function = function(object) bag.putObject(object) end
                })
                coroutine.yield(0)
            end
        end
    end

end

-------------------------------------------------------------------------------

function doSetup()
    startLuaCoroutine(self, 'doSetupCoroutine')
end

function doSetupCoroutine()
    packFactions()
    coroutine.yield(0)

    local bags = createBags()
    coroutine.yield(0)

    local bagsZone = createPackBagsHiddenZone()
    coroutine.yield(0)
    unpackToBags(bags)
    coroutine.yield(0)

    createHiddenZones()
    coroutine.yield(0)

    createHiddenBags()
    coroutine.yield(0)

    unpackToTable()
    coroutine.yield(0)

    local pos = self.getPosition()
    for _, name in ipairs(CLONE_TO_HIDDEN) do
        cloneToHidden(name)
        coroutine.yield(0)
    end

    local f = 'onFrankenEnabled'
    local inform = {}
    for _, object in ipairs(getAllObjects()) do
        if object.getVar(f) then
            table.insert(inform, object)
        end
    end
    for i, object in ipairs(inform) do
        local function delayedInform()
            print('Sending ' .. f .. ' to ' .. object.getName())
            object.call(f, true)
        end
        Wait.frames(delayedInform, i)
    end

    -- Unpack should have finished packing the center bags by now.
    destroyObject(bagsZone)
    coroutine.yield(0)

    return 1
end

function removeHiddenZones()
    for _, object in ipairs(getAllObjects()) do
        if object.tag == 'Fog' and object.getName() == HIDDEN_ZONE_NAME then
            destroyObject(object)
        end
    end
end

function reportFactions()
    _factionHelper.reportFactions()
end

function onLoad(saveState)
    local function doSimpleSetup()
        _useToggles = false
        doSetup()
    end
    self.addContextMenuItem('Setup Franken', doSimpleSetup)
    self.addContextMenuItem('Custom Franken..', createCustomSelectionUi)
    self.addContextMenuItem('Remove hidden zones', removeHiddenZones)

    self.addContextMenuItem('Report Factions', reportFactions)

    --createCustomSelectionUi() -- for testing
end

-------------------------------------------------------------------------------

local _nameList = false
local _nameToEntries = false
local _tabName

local function getNameToEntries()
    if not _nameToEntries then
        local function sortEntries(a, b)
            return a.name < b.name
        end

        _nameList = {}
        _nameToEntries = {}

        for name, count in pairs(UNPACK_TO_BAGS) do
            table.insert(_nameList, name)
            local object = takeToAbove(self, name)
            assert(object)
            coroutine.yield(0)
            local entries = {}
            for _, entry in ipairs(object.getObjects()) do
                table.insert(entries, {
                    guid = entry.guid,
                    name = entry.name
                })
            end
            assert(#entries > 0)
            table.sort(entries, sortEntries)
            _nameToEntries[name] = entries
            self.putObject(object)
            coroutine.yield(0)
        end
        table.sort(_nameList)
    end
    return _nameList, _nameToEntries
end

local function createAndCheckAllToggles(nameToEntries)
    assert(type(nameToEntries) == 'table')
    _toggles = {}
    for name, entries in pairs(nameToEntries) do
        for _, entry in ipairs(entries) do
            if entry.guid then
                _toggles[entry.guid] = true
            end
        end
    end
end

function createCustomSelectionUi(tabName)
    _tabName = tabName
    startLuaCoroutine(self, 'createCustomSelectionUiLuaCoroutine')
end

function createCustomSelectionUiLuaCoroutine()
    local nameList, nameToEntries = getNameToEntries()
    if not _toggles then
        createAndCheckAllToggles(nameToEntries)
    end

    local tabName = nameToEntries[_tabName] and _tabName or nameList[1]

    -- Compute the max number of rows needed when split into #tab columns.
    local numCols = math.ceil(#nameList / 2)
    local numRows = 1
    for _, entries in pairs(nameToEntries) do
        local entriesPerColumn = math.ceil(#entries / numCols)
        --print('xxx ' .. (#entries) .. ' ' .. entriesPerColumn .. ' ' .. (#entries / numCols) .. ' ' .. numRows)
        numRows = math.max(numRows, entriesPerColumn + 4)
    end
    --print('Table ' .. numCols .. 'x' .. numRows)

    -- Create columns and add tabs.
    local cols = {}
    for i = 1, numCols do
        local tab1 = nameList[i]
        local tab2 = nameList[i + numCols]
        cols[i] = {
            tab1 and { name = tab1, id = tab1 } or false,
            tab2 and { name = tab2, id = tab2 } or false,
            i == 1 and { name = tabName } or false,
        }
    end

    -- Get tab contents.
    local entries = nameToEntries[tabName]
    local entriesPerColumn = math.ceil(#entries / numCols)
    for i, entry in ipairs(entries) do
        local colIdx = math.floor((i - 1) / entriesPerColumn) + 1
        assert(colIdx <= numCols, 'colIdx ' .. colIdx)
        local col = cols[colIdx]
        table.insert(col, entry)
    end

    -- Add footer buttons.
    local centerColIdx = math.floor(numCols / 2)
    cols[centerColIdx][numRows] = { name = 'Cancel', id = 'cancel' }
    cols[centerColIdx+1][numRows] = { name = 'Unpack', id = 'doCustomSetup' }

    local function getValue(rowIdx, colIdx)
        local col = cols[colIdx]
        return col and col[rowIdx]
    end

    local function makeCell(rowIdx, colIdx)
        local value = getValue(rowIdx, colIdx)
        assert(not value or value.name)
        return {
            tag = 'Cell',
            children = value and {
                {
                    tag = (value.guid and 'Toggle') or (value.id and 'Button') or 'Text',
                    attributes = {
                        id = value.guid or value.id or nil,
                        isOn = value.guid and (_toggles[value.guid] or false) or nil,
                    },
                    value = value.name,
                }
            } or nil
        }
    end

    local rows = {}
    for rowIdx = 1, numRows do
        local row = {}
        for colIdx = 1, numCols do
            if getValue(rowIdx, colIdx) ~= false then
                table.insert(row, makeCell(rowIdx, colIdx))
            end
        end
        table.insert(rows, {
            tag = 'Row',
            children = row
        })
    end

    local tableLayout = {
        tag = 'TableLayout',
        attributes = {
            cellPadding = '15 15 0 0',
        },
        children = rows
    }

    local defaults = {
        tag = 'Defaults',
        children = {
            {
                tag = 'Text',
                attributes = {
                    fontSize = 16,
                    fontStyle = 'Bold',
                }
            },
            {
                tag = 'Toggle',
                attributes = {
                    fontSize = 14,
                    onValueChanged = 'onToggleValueChanged',
                }
            },
            {
                tag = 'Button',
                attributes = {
                    fontSize = 20,
                    fontStyle = 'Bold',
                    onClick = 'onButtonClick'
                }
            },
        }
    }

    local panel = {
        tag = 'Panel',
        attributes = {
            id = 'ui',
            active = 'true',
            position = '0 -' .. (numRows * 25) .. ' -350',
            rotation = '180 180 0',
            width = numCols * 200,
            height = numRows * 50,
            color = '#ffffff',
        },
        children = {
            tableLayout
        }
    }

    self.UI.setXmlTable({ defaults, panel })
    return 1
end

function onButtonClick(player, input, id)
    if id == 'cancel' then
        self.UI.setXmlTable({{}})
    elseif id == 'doCustomSetup' then
        self.UI.setXmlTable({{}})
        _useToggles = true
        doSetup()
    else
        --error('unknown id "' .. id .. '"')
        createCustomSelectionUi(id)
    end
end

function onToggleValueChanged(player, value, id)
    local valueAsBool = string.lower(value) == 'true' and true or false
    assert(type(valueAsBool) == 'boolean')
    _toggles[id] = valueAsBool or nil
end


-------------------------------------------------------------------------------

local _lockGlobalsMetaTable = {}
function _lockGlobalsMetaTable.__index(table, key)
    error('Accessing missing global "' .. tostring(key or '<nil>') .. '", typo?', 2)
end
function _lockGlobalsMetaTable.__newindex(table, key, value)
    error('Globals are locked, cannot create global variable "' .. tostring(key or '<nil>') .. '"', 2)
end
setmetatable(_G, _lockGlobalsMetaTable)